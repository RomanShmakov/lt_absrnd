syntax = "proto3";

package absrnd_mvp.hold.mainapp;

import "google/protobuf/timestamp.proto";
import "absrnd_mvp.proto";

message CreateRequest {
  string idempotency_key = 1; // Ключ идемпотентности в формате UUID
  string operation_id = 2; // Идентификатор расчётной операции для холда в формате UUID
  string account_number = 3; // 20-значный номер счета
  string reason_code = 4; // Тип холда / причина установки холда
  optional string account_officer = 5; // Account Officer	
  string amount_currency = 6; // Сумма
  optional string balance_type = 7; // Тип остатка для проверки
}

message CreateResponse {

  // Статус выполнения ввода проводки
  // Положительные статусы в диапозоне от 0 до 999
  // Системная ошибка в диапозоне от 1000 до 1999
  // Ошибка бизнес-логики от 2000 до 2999
  enum ResultStatus {
    RESULT_STATUS_SUCCESS = 0;

    RESULT_STATUS_SYSTEM_ERROR = 1000;
    RESULT_STATUS_REMAINS_RESPONSE_TIMEOUT = 1001;

    RESULT_STATUS_BALANCE_EXEEDED = 2000;
    RESULT_STATUS_INVALID_AMOUNT = 2002;
    RESULT_STATUS_ACCOUNT_NOT_FOUND = 2003;
    RESULT_STATUS_ACCOUNT_CLOSED = 2004;
    RESULT_STATUS_POSTED_ALREADY = 2015;
    RESULT_STATUS_INVALID_REASON_CODE = 2016;
  }

  message Hold {
    string hold_id = 1; // Идентификатор расчётной операции для холда в формате UUID
    optional google.protobuf.Timestamp start_timestamp = 2; // Время начала действия
  }

  bool is_successfull = 1;
  ResultStatus result_status = 2; // Статус операции
  optional string result_description = 3; // Дополнительное сообщение

  optional Hold hold = 4;
}

message DeleteRequest {
  string idempotency_key = 1; // Ключ идемпотентности
  string hold_id = 2; // Идентификатор холда в формате UUID
}

message DeleteResponse {
  // Статус выполнения
  // Положительные статусы в диапозоне от 0 до 999
  // Системная ошибка в диапозоне от 1000 до 1999
  // Ошибка бизнес-логики от 2000 до 2999
  enum ResultStatus {
    RESULT_STATUS_SUCCESS = 0;

    RESULT_STATUS_SYSTEM_ERROR = 1000;
    RESULT_STATUS_REMAINS_RESPONSE_TIMEOUT = 1001;

    RESULT_STATUS_DELETED_ALREADY = 2000;
    RESULT_STATUS_REQUESTED_ALREADY = 2001;
    RESULT_STATUS_HOLD_NOT_FOUND = 2002;
    RESULT_STATUS_ACCOUNT_NOT_FOUND = 2003;
    RESULT_STATUS_ACCOUNT_CLOSED = 2004;
  }

  bool is_successfull = 1;
  ResultStatus result_status = 2; // Статус операции
  optional string result_description = 3; // Сообщение об ошибке
  
}

service HoldService {
  rpc Create(CreateRequest) returns (CreateResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}
