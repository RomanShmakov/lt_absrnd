<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[GENERAL] Parameters">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocolMetric" elementType="Argument">
            <stringProp name="Argument.name">protocolMetric</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">http</stringProp>
          </elementProp>
          <elementProp name="urlMetric" elementType="Argument">
            <stringProp name="Argument.name">urlMetric</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">monitor.yc.moscow.alfaintra.net</stringProp>
          </elementProp>
          <elementProp name="portMetric" elementType="Argument">
            <stringProp name="Argument.name">portMetric</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">8428</stringProp>
          </elementProp>
          <elementProp name="pathMetric" elementType="Argument">
            <stringProp name="Argument.name">pathMetric</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">/api/v1/import/prometheus</stringProp>
          </elementProp>
          <elementProp name="jmeterEventTags" elementType="Argument">
            <stringProp name="Argument.name">jmeterEventTags</stringProp>
            <stringProp name="Argument.value">${__time(,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testTitle" elementType="Argument">
            <stringProp name="Argument.name">testTitle</stringProp>
            <stringProp name="Argument.value">${__TestPlanName}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV account_number1" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">/home/u_m2hx7/accounts_for_jmeter.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">account_number1</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV account_number2" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">/home/u_m2hx7/accounts_for_jmeter.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">account_number2</stringProp>
      </CSVDataSet>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="jmeter_events" enabled="true">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${urlMetric}</stringProp>
          <stringProp name="HTTPSampler.port">${portMetric}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocolMetric}</stringProp>
          <stringProp name="HTTPSampler.path">${pathMetric}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">jmeter_events{application=&quot;${__TestPlanName}&quot;,tags=&quot;${jmeterEventTags}&quot;,event=&quot;start&quot;,testTitle=&quot;${testTitle}&quot;} ${jmeterEventTags}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setIgnore" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setIgnore()
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="STG" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">800</stringProp>
        <stringProp name="Threads initial delay">0</stringProp>
        <stringProp name="Start users count">80</stringProp>
        <stringProp name="Start users count burst">0</stringProp>
        <stringProp name="Start users period">900</stringProp>
        <stringProp name="Stop users count">10</stringProp>
        <stringProp name="Stop users period">1</stringProp>
        <stringProp name="flighttime">900</stringProp>
        <stringProp name="rampUp">60</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <intProp name="calcMode">0</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>600.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="create_request">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import absrnd_mvp.client.PostingClient
try {
    // если мы не нашли account_number1 или account_number2, то сообщение об ошибке будет выглядеть так:
    // JMeter error in request &quot;create_request&quot;: &quot;Success: false, Code: 503, Status: UNAVAILABLE, Description: null&quot;
    
    String result = PostingClient.sendRequest(vars.get(&quot;account_number1&quot;), vars.get(&quot;account_number2&quot;))

    // Парсим все компоненты ответа
    // success
    def successMatcher = (result =~ /Success:\s*(true|false)/)
    String success = successMatcher.find() ? successMatcher.group(1) : &quot;unknown&quot;
    // responseCode
    def codeMatcher = (result =~ /Code:\s*(\d+)/)
    String responseCode = codeMatcher.find() ? codeMatcher.group(1) : &quot;unknown&quot;
    // status
    def statusMatcher = (result =~ /Status:\s*([\w_]+)/)
    String status = statusMatcher.find() ? statusMatcher.group(1) : &quot;unknown&quot;
    // description
    def descMatcher = (result =~ /Description:\s*(.*)/)
    String description = descMatcher.find() ? descMatcher.group(1) : &quot;No description&quot;
    
    String newResponseData = (&quot;\&quot;&quot; + status.toString() + &quot;\&quot;&quot; + &quot;-&quot; + &quot;\&quot;&quot; + description.toString() + &quot;\&quot;&quot;)
    
    // status
    SampleResult.setResponseMessage(newResponseData.toString())
    // description
    SampleResult.setResponseData(newResponseData.toString(), &quot;UTF-8&quot;)
    SampleResult.setBytes(newResponseData.toString().bytes.length)
    
    // responseCode
    // Устанавливаем код ответа (0 - успешный код ответа от приложения, но мы вместо него используем 200 HTTP-код)
    if (responseCode == &quot;0&quot;) {
        SampleResult.setResponseCodeOK() // Устанавливает 200
    } else {
        SampleResult.setResponseCode(responseCode) // Устанавливает бизнес-код ошибки
    }
    
    // successful
    if(status==&quot;RESULT_STATUS_SUCCESS&quot; &amp;&amp; success==&quot;true&quot;){
        SampleResult.setSuccessful(true)
    } else {
        SampleResult.setSuccessful(false)
        log.error(&quot;JMeter error in request \&quot;create_request\&quot;: \&quot;&quot; + result + &quot;\&quot;&quot;)
        if(result.contains(&quot;SessionClosed&quot;)){
        	PostingClient.closeSession()
        	log.error(&quot;Server return \&quot;SessionClosed\&quot;. Virtual user will recreate his session.&quot;)
        }
    }
} catch (Exception e) {
    log.error(&quot;JMeter error in request \&quot;create_request\&quot;: \&quot;&quot; + e.getMessage())
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode(&quot;500&quot;)
    SampleResult.setResponseMessage(&quot;JMETER_EXCEPTION: &quot; + e.getMessage())
    SampleResult.setResponseData(e.getMessage(), &quot;UTF-8&quot;)
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </PostThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="jmeter_events" enabled="true">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${urlMetric}</stringProp>
          <stringProp name="HTTPSampler.port">${portMetric}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocolMetric}</stringProp>
          <stringProp name="HTTPSampler.path">${pathMetric}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">jmeter_events{application=&quot;${__TestPlanName}&quot;,tags=&quot;${jmeterEventTags}&quot;,event=&quot;end&quot;} ${__time()}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setIgnore" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setIgnore()
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="shut_down" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import absrnd_mvp.client.PostingClient

try {
    log.info(&quot;Starting shutdown of PostingClient connections&quot;)
    String statsBefore = PostingClient.getConnectionStats()
    // Закрываем все подключения
    PostingClient.shutdown()
    String statsAfter = PostingClient.getConnectionStats()
    log.info(&quot;Shutdown completed. Stats before: &quot; + statsBefore + &quot;, after: &quot; + statsAfter)
    SampleResult.setSuccessful(true)
    SampleResult.setResponseMessage(&quot;Shutdown completed&quot;)
} catch (Exception e) {
    log.error(&quot;Error during shutdown: &quot; + e.getMessage(), e)
    SampleResult.setSuccessful(false)
    SampleResult.setResponseMessage(&quot;Error: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="setIgnore" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setIgnore()
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://monitor.yc.moscow.alfaintra.net:8428/write</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">${__TestPlanName}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">${__P(testTitle)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value">${__time()}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
