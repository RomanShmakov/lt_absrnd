syntax = "proto3";

package absrnd_mvp.posting.mainapp;

import "google/protobuf/timestamp.proto";
import "absrnd_mvp.proto";

message CreateRequest {

  // Информация об одном движении средств
  message FundsMovement {
    uint32 funds_movement_number = 1; // Номер движения по счету
    FundsDirection funds_direction = 2; // Направление движения средста
    string account_number = 3; // 20-значный номер счета
    string amount_currency = 4; // Сумма в валюте счета
    optional string amount_currency_base = 5; // Сумма в рублевом эквиваленте
    optional string hold_id = 6; // Идентификатор холда
  }

  string idempotency_key = 1; // Ключ идемпотентности
  string document_id = 2; // Внутренний идентификатор документа в формате UUID
  optional google.protobuf.Timestamp posting_balance_date = 3; // Дата учета проводки в балансе
  repeated FundsMovement funds_movements = 4; // Движения средств
  optional string balance_type = 6; // Вид проверяемого остатка
  optional string additional_info = 7; // Дополнительная информация	
  optional string validate_param = 8; // Дополнительные параметры управления валидацией	
}

message CreateResponse {

  // Статус выполнения ввода проводки
  // Положительные статусы в диапозоне от 0 до 999
  // Системная ошибка в диапозоне от 1000 до 1999
  // Ошибка бизнес-логики от 2000 до 2999
  enum ResultStatus {
    RESULT_STATUS_SUCCESS = 0;
    RESULT_STATUS_SYSTEM_ERROR = 1000;
    RESULT_STATUS_REMAINS_RESPONSE_TIMEOUT = 1001;
    RESULT_STATUS_BALANCE_EXEEDED = 2000;
    RESULT_STATUS_INVALID_FUNDS_MOVEMENTS_NUMBER = 2001;
    RESULT_STATUS_INVALID_FUNDS_MOVEMENTS_DEBIT = 2002;
    RESULT_STATUS_INVALID_FUNDS_MOVEMENTS_CREDIT = 2003;
    RESULT_STATUS_INVALID_AMOUNT = 2004;
    RESULT_STATUS_ACCOUNT_NOT_EXISTS = 2005;
    RESULT_STATUS_ACCOUNT_NO_DEBIT = 2006;
    RESULT_STATUS_ACCOUNT_NO_CREDIT = 2007;
    RESULT_STATUS_ACCOUNT_BLOCKED = 2008;
    RESULT_STATUS_ACCOUNT_CLOSED = 2009;
    RESULT_STATUS_AMMOUNT_TURN_OVER_DIFF = 2010;
    RESULT_STATUS_ACCOUNT_FILIAL_DIFF = 2011;
    RESULT_STATUS_HOLD_NOT_EXISTS = 2012;
    RESULT_STATUS_HOLD_WRONG_ACCOUNT = 2013;
    RESULT_STATUS_HOLD_WRONG_DOCUMENT = 2014;
    RESULT_STATUS_POSTED_ALREADY = 2015;
    RESULT_STATUS_DELETED_ALREADY = 2016;
    RESULT_STATUS_REQUESTED_ALREADY = 2017;
  }

  bool is_successfull = 1;
  ResultStatus result_status = 2; // Статус операции
  optional string result_description = 3; // Сообщение об ошибке
}

message DeleteRequest {
  string idempotency_key = 1; // Ключ идемпотентности
  string document_id = 2; // Внутренний идентификатор документа в формате UUID
}

message DeleteResponse {

  // Статус выполнения
  // Положительные статусы в диапозоне от 0 до 999
  // Системная ошибка в диапозоне от 1000 до 1999
  // Ошибка бизнес-логики от 2000 до 2999
  enum ResultStatus {
    RESULT_STATUS_SUCCESS = 0;

    RESULT_STATUS_SYSTEM_ERROR = 1000;
    RESULT_STATUS_REMAINS_RESPONSE_TIMEOUT = 1001;

    RESULT_STATUS_DELETED_ALREADY = 2000;
    RESULT_STATUS_REQUESTED_ALREADY = 2001;
    RESULT_STATUS_POSTING_NOT_FOUND = 2002;
    RESULT_STATUS_FUNDS_MOVEMENT_NOT_FOUND = 2003;
  }

  bool is_successfull = 1;
  ResultStatus result_status = 2; // Статус операции
  optional string result_description = 3; // Сообщение об ошибке
  
}

service PostingService {
  rpc Create(CreateRequest) returns (CreateResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}
